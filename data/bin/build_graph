#!/usr/bin/env python

import click
import numpy as np
import datetime
import os
import shutil
import json

from collections import OrderedDict
from textplot.utils import sort_dict
from textplot.text import Text
from humanist.graphs import Diachronic
from textplot.matrix import Matrix


@click.command()
@click.option('--freq_depth',   default=3000)
@click.option('--spike_depth',  default=1000)
@click.option('--skim_depth',   default=6)
@click.option('--bandwidth',    default=100000)
def build_graph(freq_depth, spike_depth, skim_depth, bandwidth):

    # Clear KDEs.
    shutil.rmtree('build/kde', ignore_errors=True)
    os.makedirs('build/kde')

    click.echo('Tokenizing corpus...')
    t = Text.from_file('corpus.txt')
    m = Matrix(t)

    # Get the top X most frequent terms.
    frequent = t.most_frequent_terms(freq_depth)

    click.echo('Computing standard deviations...')
    spiky = OrderedDict()
    for term in frequent:
        spiky[term] = np.std(t.terms[term])

    # Sort by KDE max.
    spiky = sort_dict(spiky, False)
    terms = list(spiky.keys())[:spike_depth]

    click.echo('Indexing terms:')
    m.index(terms, bandwidth=bandwidth)

    g = Diachronic()

    click.echo('Generating graph:')
    g.build(m, skim_depth)
    g.write_gml('build/graph.gml')

    d1 = datetime.datetime(1987, 5, 12)
    d2 = datetime.datetime(2014, 9, 26)
    duration = (d2-d1).total_seconds()

    dates = []
    for i in range(100):
        diff = (float(i)/100) * duration
        date = d1 + datetime.timedelta(seconds=diff)
        dates.append(date.isoformat())

    # Write the KDEs.
    for term in terms:

        # Compute the KDE.
        kde = t.kde(term, bandwidth=bandwidth, samples=100)
        out = 'build/kde/'+t.unstem(term)+'.json'

        line = []
        vmax = max(kde)
        for i, v in enumerate(kde):
            line.append({'value': v/vmax, 'date': dates[i]})

        # Write the file.
        with open(out, 'w') as f:
            f.write(json.dumps(line))
            click.echo(out)


if __name__ == '__main__':
    build_graph()
